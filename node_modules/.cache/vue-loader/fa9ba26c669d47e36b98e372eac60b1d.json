{"remainingRequest":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/src/components/ThreeboxExample.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/src/components/ThreeboxExample.vue","mtime":1638379651000},{"path":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/cache-loader/dist/cjs.js","mtime":1637704935000},{"path":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/babel-loader/lib/index.js","mtime":1637705426000},{"path":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/cache-loader/dist/cjs.js","mtime":1637704935000},{"path":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/vue-loader/lib/index.js","mtime":1637705662000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["ThreeboxExample.vue"],"names":[],"mappings":";;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"ThreeboxExample.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"map\"></div>\n</template>\n\n<script>\nimport mapboxgl from \"mapbox-gl\";\nimport * as MapboxDraw from 'mapbox-gl-draw';\nimport threebox from \"threebox-plugin/dist/threebox\";\nimport { Threebox } from 'threebox-plugin';\nimport Pulse from \"./Pulses/Pulse\";\nimport * as turf from '@turf/turf';\n\n\nlet pulse = new Pulse(400, 4000, true);\nthreebox\n\nexport default {\n  name: \"ThreeboxExample\",\n  data() {\n    return {\n      accessToken:\n        \"pk.eyJ1IjoibmljaG9sYXNtYXJ0aW5vIiwiYSI6ImNrMjVhOGphOTAzZGUzbG8wNHJhdTZrMmYifQ.98uDMnGIvn1zrw4ZWUO35g\",\n    };\n  },\n  mounted() {\n    mapboxgl.accessToken = this.accessToken;\n\n    this.map = new mapboxgl.Map({\n      container: \"map\",\n      interactive: true,\n      style:  \"mapbox://styles/mapbox/light-v10\",\n      zoom: 16,\n      center: [-123.1068658, 49.2626982],\n      pitch: 60,\n      bearing: 360,\n      antialias: true,\n      // attributionControl: false\n    }).on(\"style.load\", () => {\n      window.tb = new Threebox(\n        this.map,\n        this.map.getCanvas().getContext(\"webgl\"),\n        {\n          defaultLights: true,\n        }\n      );\n\n      // let _this = this;\n\n      // Add draw control\n      if (this.map.getLayer(\"custom_layer\") == null) {\n\n        this.map.on('load', () => {\n\n          // // Add 3D terrain\n          // this.map.addSource('mapbox-dem', {\n          //   'type': 'raster-dem',\n          //   'url': 'mapbox://mapbox.mapbox-terrain-dem-v1',\n          //   'tileSize': 512,\n          //   'maxzoom': 20\n          // });\n          //\n          // // add the DEM source as a terrain layer with exaggerated height\n          // this.map.setTerrain({ 'source': 'mapbox-dem', 'exaggeration': 1.5 });\n\n          // // Add parcels layer source (CoV)\n          // this.map.addSource('property-parcel-polygons', {\n          //   'type': 'geojson',\n          //   'data': 'https://raw.githubusercontent.com/nicholasmartino/vue-threebox/master/public/data/property-parcel-polygons.geojson',\n          // });\n          //\n          // // Add parcels layer to map\n          // this.map.addLayer({\n          //   'id': 'property-parcel-polygons-shp',\n          //   'type': 'fill',\n          //   'source': 'property-parcel-polygons',\n          //   'paint': {\n          //     'fill-color': '#0080ff', // blue color fill\n          //     'fill-opacity': 0.2,\n          //   },\n          // });\n\n          // The 'building' layer in the Mapbox Streets\n          // vector tileset contains building height data\n          // from OpenStreetMap.\n          this.map.addLayer({\n            'id': 'add-3d-buildings',\n            'source': 'composite',\n            'source-layer': 'building',\n            'filter': ['==', 'extrude', 'true'],\n            'type': 'fill-extrusion',\n            'minzoom': 12,\n            'paint': {\n              'fill-extrusion-color': '#aaa',\n\n              // Use an 'interpolate' expression to\n              // add a smooth transition effect to\n              // the buildings as the user zooms in.\n              'fill-extrusion-height': [\n                'interpolate',\n                ['linear'],\n                ['zoom'],\n                9,\n                0,\n                15.05,\n                ['get', 'height']\n              ],\n              'fill-extrusion-base': [\n                'interpolate',\n                ['linear'],\n                ['zoom'],\n                9,\n                0,\n                15.05,\n                ['get', 'min_height']\n              ],\n\n              // 'fill-extrusion-height': ['get', 'height'],\n              'fill-extrusion-opacity': 0.8,\n            },\n          });\n\n        });\n\n        // // Add spheres to map\n        // this.map.addLayer({\n        //   id: \"custom_layer\",\n        //   type: \"custom\",\n        //   renderingMode: \"3d\",\n        //\n        //   onAdd: function (map, mbxContext) {\n        //     window.tb.add(_this.sphere(-123.1068658, 49.2626982));\n        //     window.tb.add(_this.sphere(-123.1088658, 49.2626982));\n        //\n        //     let pulseObj = window.tb\n        //       .Object3D({ obj: pulse, units: \"meters\" })\n        //       .setCoords([-123.1068658, 49.2626982, 0]);\n        //\n        //     pulseObj.setAnchor(\"bottom-left\");\n        //\n        //     window.tb.add(pulseObj);\n        //   },\n        //   render: function (gl, matrix) {\n        //     window.tb.update();\n        //     _this.animatePulse();\n        //   },\n        // });\n\n      }\n    });\n\n    // Add draw controls\n    const draw = new MapboxDraw();\n    this.map.addControl(draw, 'top-right');\n\n    // Extract boundary of polygon\n    function dividePol(){\n      const data = draw.getAll();\n      const pol = turf.polygon(data)\n      const line = turf.polygonToLine(pol);\n      console.log(line)\n      const chunks = turf.lineChunk(line, 0.1)\n      console.log(chunks)\n      console.log(chunks.length)\n      for (let i = 0; i < chunks.length; i++) {\n        const seg = turf.lineString(chunks[i])\n        console.log(turf.centroid(seg))\n      }\n      return chunks\n    }\n\n    // Calculate the area of drawn polygons\n    function updateArea() {\n        const data = draw.getAll();\n        const answer = document.getElementById('calculated-area');\n        if (data.features.length > 0) {\n          const area = turf.area(data);\n\n          // Restrict the area to 2 decimal points.\n          const rounded_area = Math.round(area * 100) / 100;\n          answer.innerHTML = `<p><strong>${rounded_area}</strong> m²</p>`;\n        } else {\n          answer.innerHTML = '';\n          // if (e.type !== 'draw.delete')\n          //   alert('Click the map to draw a polygon.');\n      }\n    }\n\n    this.map.on('draw.create', updateArea);\n    this.map.on('draw.delete', updateArea);\n    this.map.on('draw.update', updateArea);\n\n    this.map.on('draw.create', () => {\n      console.log(dividePol())\n      this.map.addSource('draw', {\n        'type': 'geojson',\n        'data': dividePol(),\n      });\n      this.map.addLayer({\n        'id': 'outline',\n        'type': 'circle',\n        'source': 'draw',\n        'paint': {\n          'circle-color': '#F84C4C',\n        }\n      });\n    });\n\n    this.map.on('draw.delete', () => {\n      this.map.removeLayer('outline')\n      this.map.removeSource('draw')\n    });\n\n    this.map.on('draw.update', () => {\n      this.map.removeLayer('outline')\n      this.map.removeSource('draw')\n      this.map.addSource('draw', {\n        'type': 'geojson',\n        'data': dividePol(),\n      });\n      this.map.addLayer({\n        'id': 'outline',\n        'type': 'circle',\n        'source': 'draw',\n        'paint': {\n          'circle-radius': 10,\n          'circle-color': '#F84C4C' // red color\n        }\n      });\n    });\n\n  },\n  methods: {\n    sphere(lon, lat) {\n      let origin = [lon, lat, 0];\n      return window.tb\n        .sphere({ color: \"red\", material: \"MeshToonMaterial\" })\n        .setCoords(origin);\n    },\n    animatePulse() {\n      pulse.update();\n      this.map.triggerRepaint();\n    },\n  },\n\n};\n\n</script>\n\n<style>\n#map {\n  position: absolute;\n  width: 100vw;\n  height: 100vh;\n}\n@import \"https://api.mapbox.com/mapbox-gl-js/v0.42.0/mapbox-gl.css\";\n@import \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.2.2/mapbox-gl-draw.css\";\n.mapboxgl-ctrl-group button {\n    width: 29px;\n    height: 29px;\n    display: block;\n    padding: 0;\n    outline: none;\n    border: 0;\n    box-sizing: border-box;\n    background-color: transparent;\n    cursor: pointer;\n    overflow: hidden;\n}\n.mapboxgl-ctrl-top-right {\n    top: 0;\n    right: 0;\n    position: absolute;\n}\n</style>\n"]}]}