{"remainingRequest":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/babel-loader/lib/index.js!/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/src/components/ThreeboxExample.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/src/components/ThreeboxExample.vue","mtime":1638923255000},{"path":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/cache-loader/dist/cjs.js","mtime":1637704935000},{"path":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/babel-loader/lib/index.js","mtime":1637705426000},{"path":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/cache-loader/dist/cjs.js","mtime":1637704935000},{"path":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/vue-loader/lib/index.js","mtime":1637705662000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["ThreeboxExample.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <div id=\"map\"></div>\n    <div id=\"vue-range-slider\">\n      <RangeSlider v-on:changeValue=\"updateValue($event)\"/>\n    </div>\n  </div>\n</template>\n\n<script>\nimport mapboxgl from \"mapbox-gl\";\nimport * as MapboxDraw from 'mapbox-gl-draw';\nimport threebox from \"threebox-plugin/dist/threebox\";\nimport { Threebox } from 'threebox-plugin';\nimport Pulse from \"./Pulses/Pulse\";\nimport * as turf from '@turf/turf';\nimport RangeSlider from \"./RangeSlider\"\nimport { mapState } from \"vuex\";\n\n\nconsole.log(mapState)\nlet pulse = new Pulse(400, 4000, true);\nthreebox\n\n\n// Returns true if finds a defined key in the input array of dictionaries\nfunction keyInDictionary (dictionaries, keyToFind) {\n    for (var i in dictionaries) {\n        if (dictionaries[i]['id'] == keyToFind) {\n            return true\n        }\n    }\n}\n\n\n// Returns a list of centroids of multiple LineStrings\nfunction lineCentroids(lines) {\n  const centroids = [];\n  for (let i = 0; i < lines.features.length; i++) {\n    const line = turf.lineString(lines.features[i])\n    const ctr = turf.centroid(line['geometry']['coordinates'])\n    centroids.push(ctr)\n  }\n  return centroids\n}\n\n\n// Returns points along a LineString divided according to a specified length in meters\nfunction divideLineString(line, length=100) {\n  const chunks = turf.lineChunk(line, length, {units: 'meters'})\n  return lineCentroids(chunks)\n}\n\n\n// Extract drawn shape and convert it to a polygon\nfunction getPolygonDrawn(draw){\n  const data = draw.getAll()\n  return turf.polygon(data.features[0]['geometry']['coordinates'])\n}\n\n\n// Extract internal skeleton of a shape\nfunction voronoiSkeleton(draw){\n  const pol = getPolygonDrawn(draw)\n  const line = turf.polygonToLine(pol)\n  const chunks = turf.lineChunk(line, 0.01)\n  const centroids = lineCentroids(chunks)\n  const centroids_gj = {\n    \"type\": \"FeatureCollection\",\n    \"features\": centroids\n  }\n  const voronoi = turf.voronoi(centroids_gj)\n  // Iterate over voronoi polygons to extract segments inside drawing\n  const voronoiLines = [];\n  for (let i = 0; i < voronoi.features.length; i++) {\n    const voronoiPolygon = turf.polygon(voronoi.features[i]['geometry']['coordinates']);\n    const voronoiLine = turf.polygonToLine(voronoiPolygon)\n    const voronoiSegments = turf.lineSegment(voronoiLine)\n    for (let i = 0; i < voronoiSegments.features.length; i++) {\n      const segmentCentroid = turf.centroid(voronoiSegments.features[i])\n      if (turf.booleanContains(pol, segmentCentroid)) {\n        voronoiLines.push(voronoiSegments.features[i])\n      }\n    }\n  }\n  const voronoiLinesGeoJSON = {\n    \"type\": \"FeatureCollection\",\n    \"features\": voronoiLines\n  }\n  const voronoiLinesCombined = turf.combine(voronoiLinesGeoJSON)\n  const voronoiLinesSimplified = turf.simplify(voronoiLinesCombined,\n    {tolerance: 5, mutate: true})\n  return voronoiLinesSimplified\n}\n\n\n// Generate skeleton and buffer according to some number of iterations\nfunction bufferDrawSkeleton(skeleton) {\n  const bufferedSkeletons = []\n  for (let i = 0; i < 3; i++) {\n    const skeletonBuffer = turf.buffer(skeleton, 30 * (i+1), {units: 'meters'})\n    const dissolvedSkeleton = turf.dissolve(skeletonBuffer)\n    bufferedSkeletons.push(turf.lineString(dissolvedSkeleton.features[0]['geometry']['coordinates'][0]))\n  }\n  return bufferedSkeletons\n}\n\n\n// Subdivide a drawn shape using Voronoi patterns\nfunction subdivideShape(draw) {\n  const skeleton = voronoiSkeleton(draw)\n  const skeletonBufferSmall = turf.buffer(skeleton, 0.1, {units: 'meters'}).features[0]\n  const skeletonLine = turf.polygonToLine(skeletonBufferSmall)\n  const dividedSkeleton = divideLineString(turf.combine(skeletonLine))\n  const voronoiSkeletonBuffers = bufferDrawSkeleton(skeleton)\n  const perpendicularLines = []\n  for (let i = 0; i < dividedSkeleton.length; i++) {\n    var originalPoint = dividedSkeleton[i]\n    const nearestPoints = [originalPoint['geometry']['coordinates']]\n    for (let j = 0; j < voronoiSkeletonBuffers.length; j++) {\n      const buffer = voronoiSkeletonBuffers[j]\n      const nextPoint = turf.nearestPointOnLine(buffer, turf.point(originalPoint['geometry']['coordinates']))\n      nearestPoints.push(nextPoint['geometry']['coordinates'])\n      originalPoint = nextPoint\n    }\n    perpendicularLines.push(turf.lineString(nearestPoints))\n  }\n  // Buffer lines and subtract\n  const centerlines = turf.featureCollection(perpendicularLines.concat(skeleton.features, voronoiSkeletonBuffers))\n  return centerlines\n}\n\n\nfunction generateBlocks(draw, street_width) {\n  const bufferedCenterlines = turf.dissolve(turf.buffer(subdivideShape(draw), street_width/2, {units: 'meters'}))\n  return turf.difference(getPolygonDrawn(draw), bufferedCenterlines.features[0])\n}\n\n\nfunction deleteOutlineDraws(map) {\n  if (keyInDictionary(map.getStyle().layers, 'outline')) {\n    map.removeLayer('outline')\n  }\n  if ('draw' in map.getStyle().sources) {\n    map.removeSource('draw')\n  }\n}\n\n\nexport default {\n  name: \"ThreeboxExample\",\n  data() {\n    return {\n      accessToken:\n        \"pk.eyJ1IjoibmljaG9sYXNtYXJ0aW5vIiwiYSI6ImNrMjVhOGphOTAzZGUzbG8wNHJhdTZrMmYifQ.98uDMnGIvn1zrw4ZWUO35g\",\n      value: null,\n      drawing: null,\n      markers: []\n    };\n  },\n  mounted() {\n    this.initMap()\n  },\n  components: {\n    RangeSlider\n  },\n  computed: {\n  ...mapState([\"currentFeatures\"]),\n  },\n  watch: {\n    currentFeatures: {\n      handler() {\n        if (this.currentFeatures) {\n          this.resetMarkers();\n          this.updateMarkers();\n          console.log(this.currentFeatures)\n\n        }\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    updateValue(value) {\n      this.value = value\n      console.log(\"Value updated to\", this.value)\n    },\n    sphere(lon, lat) {\n      let origin = [lon, lat, 0];\n      return window.tb\n        .sphere({ color: \"red\", material: \"MeshToonMaterial\" })\n        .setCoords(origin);\n    },\n    animatePulse() {\n      pulse.update();\n      this.map.triggerRepaint();\n    },\n    initMap() {\n      mapboxgl.accessToken = this.accessToken;\n      this.map = new mapboxgl.Map({\n        container: \"map\",\n        interactive: true,\n        style:  \"mapbox://styles/mapbox/dark-v10\",\n        zoom: 16,\n        center: [-123.1068658, 49.2626982],\n        pitch: 60,\n        bearing: 360,\n        antialias: true,\n        // attributionControl: false\n      }).on(\"style.load\", () => {\n        window.tb = new Threebox(\n          this.map,\n          this.map.getCanvas().getContext(\"webgl\"),\n          {\n            defaultLights: true,\n          }\n        );\n\n        // Add draw control\n        if (this.map.getLayer(\"custom_layer\") == null) {\n\n          this.map.on('load', () => {\n\n            // // Add 3D terrain\n            // this.map.addSource('mapbox-dem', {\n            //   'type': 'raster-dem',\n            //   'url': 'mapbox://mapbox.mapbox-terrain-dem-v1',\n            //   'tileSize': 512,\n            //   'maxzoom': 20\n            // });\n            //\n            // // add the DEM source as a terrain layer with exaggerated height\n            // this.map.setTerrain({ 'source': 'mapbox-dem', 'exaggeration': 1.5 });\n\n            // // Add parcels layer source (CoV)\n            // this.map.addSource('property-parcel-polygons', {\n            //   'type': 'geojson',\n            //   'data': 'https://raw.githubusercontent.com/nicholasmartino/vue-threebox/master/public/data/property-parcel-polygons.geojson',\n            // });\n            //\n            // // Add parcels layer to map\n            // this.map.addLayer({\n            //   'id': 'property-parcel-polygons-shp',\n            //   'type': 'fill',\n            //   'source': 'property-parcel-polygons',\n            //   'paint': {\n            //     'fill-color': '#0080ff', // blue color fill\n            //     'fill-opacity': 0.2,\n            //   },\n            // });\n\n            // The 'building' layer in the Mapbox Streets\n            // vector tileset contains building height data\n            // from OpenStreetMap.\n            this.map.addLayer({\n              'id': 'add-3d-buildings',\n              'source': 'composite',\n              'source-layer': 'building',\n              'filter': ['==', 'extrude', 'true'],\n              'type': 'fill-extrusion',\n              'minzoom': 12,\n              'paint': {\n                'fill-extrusion-color': '#aaa',\n\n                // Use an 'interpolate' expression to\n                // add a smooth transition effect to\n                // the buildings as the user zooms in.\n                'fill-extrusion-height': [\n                  'interpolate',\n                  ['linear'],\n                  ['zoom'],\n                  9,\n                  0,\n                  15.05,\n                  ['get', 'height']\n                ],\n                'fill-extrusion-base': [\n                  'interpolate',\n                  ['linear'],\n                  ['zoom'],\n                  9,\n                  0,\n                  15.05,\n                  ['get', 'min_height']\n                ],\n\n                // 'fill-extrusion-height': ['get', 'height'],\n                'fill-extrusion-opacity': 0.8,\n              },\n            });\n\n          });\n\n          // // Add spheres to map\n          // const _this = this\n          // this.map.addLayer({\n          //   id: \"custom_layer\",\n          //   type: \"custom\",\n          //   renderingMode: \"3d\",\n          //\n          //   onAdd: function (map, mbxContext) {\n          //     window.tb.add(_this.sphere(-123.1068658, 49.2626982));\n          //     window.tb.add(_this.sphere(-123.1088658, 49.2626982));\n          //     console.log(map)\n          //     console.log(mbxContext)\n          //     let pulseObj = window.tb\n          //       .Object3D({ obj: pulse, units: \"meters\" })\n          //       .setCoords([-123.1068658, 49.2626982, 0]);\n          //\n          //     pulseObj.setAnchor(\"bottom-left\");\n          //\n          //     window.tb.add(pulseObj);\n          //   },\n          //   render: function (gl, matrix) {\n          //     window.tb.update();\n          //     _this.animatePulse();\n          //     console.log(gl)\n          //     console.log(matrix)\n          //   },\n          // });\n\n        }\n      });\n\n      // Add draw controls\n      const draw = new MapboxDraw();\n      this.map.addControl(draw, 'top-right');\n\n      // Calculate the area of drawn polygons\n      function updateArea() {\n          const data = draw.getAll();\n          const answer = document.getElementById('calculated-area');\n          if (data.features.length > 0) {\n            const area = turf.area(data);\n\n            // Restrict the area to 2 decimal points.\n            const rounded_area = Math.round(area * 100) / 100;\n            answer.innerHTML = `<p><strong>${rounded_area}</strong> m²</p>`;\n          } else {\n            answer.innerHTML = '';\n            // if (e.type !== 'draw.delete')\n            //   alert('Click the map to draw a polygon.');\n        }\n      }\n\n      this.map.on('draw.create', updateArea);\n      this.map.on('draw.delete', updateArea);\n      this.map.on('draw.update', updateArea);\n\n      this.map.on('draw.create', () => {\n        this.map.addSource('draw', {\n          'type': 'geojson',\n          'data': generateBlocks(draw, 8),\n        });\n        this.map.addLayer({\n          'id': 'outline',\n          'type': 'fill',\n          'source': 'draw',\n          'paint': {\n            'fill-color': '#06be7f',\n          }\n        });\n      });\n\n      this.map.on('draw.delete', () => {\n        deleteOutlineDraws(this.map)\n      });\n\n      this.map.on('draw.update', () => {\n        deleteOutlineDraws(this.map)\n        this.map.addSource('draw', {\n          'type': 'geojson',\n          'data': generateBlocks(draw, 8),\n        });\n        this.map.addLayer({\n          'id': 'outline',\n          'type': 'fill',\n          'source': 'draw',\n          'paint': {\n            'fill-color': '#06be7f' // red color\n          }\n        });\n      });\n\n      if (this.markers.length > 0) {\n        this.resetMarkers();\n      }\n\n      if (this.currentFeatures) {\n        this.updateMarkers();\n      }\n    },\n    resetMarkers() {\n      this.markers.forEach((marker) => {\n        marker.remove();\n      });\n      this.markers = [];\n    },\n    updateMarkers() {\n      this.markers = this.currentFeatures.features.map((feature) => {\n        const el = document.createElement(\"div\");\n        el.className = \"marker\";\n\n        // create the popup\n        const popup = this.featurePopup(feature);\n        return new mapboxgl.Marker(el).setLngLat(feature.geometry.coordinates).setPopup(popup).addTo(this.map);\n      });\n    },\n  },\n};\n\n</script>\n\n\n<style>\n#map {\n  position: absolute;\n  width: 100vw;\n  height: 100vh;\n}\n@import \"https://api.mapbox.com/mapbox-gl-js/v0.42.0/mapbox-gl.css\";\n@import \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.2.2/mapbox-gl-draw.css\";\n.mapboxgl-ctrl-group button {\n    width: 29px;\n    height: 29px;\n    display: block;\n    padding: 0;\n    outline: none;\n    border: 0;\n    box-sizing: border-box;\n    background-color: transparent;\n    cursor: pointer;\n    overflow: hidden;\n}\n.mapboxgl-ctrl-top-right {\n    top: 0;\n    right: 0;\n    position: absolute;\n}\n</style>\n"],"sourceRoot":"src/components"}]}