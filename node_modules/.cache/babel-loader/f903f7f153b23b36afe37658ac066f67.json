{"remainingRequest":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/babel-loader/lib/index.js!/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/src/components/Map.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/src/components/Map.vue","mtime":1638993079000},{"path":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/cache-loader/dist/cjs.js","mtime":1637704935000},{"path":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/babel-loader/lib/index.js","mtime":1637705426000},{"path":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/cache-loader/dist/cjs.js","mtime":1637704935000},{"path":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/vue-loader/lib/index.js","mtime":1637705662000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Map.vue"],"names":[],"mappings":";;;;;;;;;AAUA,OAAA,QAAA,MAAA,WAAA;AACA,OAAA,KAAA,UAAA,MAAA,gBAAA;AACA,OAAA,QAAA,MAAA,+BAAA;AACA,SAAA,QAAA,QAAA,iBAAA;AACA,OAAA,KAAA,MAAA,gBAAA;AACA,OAAA,KAAA,IAAA,MAAA,YAAA;AACA,OAAA,WAAA,MAAA,eAAA;AAGA,IAAA,KAAA,GAAA,IAAA,KAAA,CAAA,GAAA,EAAA,IAAA,EAAA,IAAA,CAAA;AACA,QAAA,C,CAGA;;AACA,OAAA,SAAA,UAAA,CAAA,IAAA,EAAA;AACA,QAAA,IAAA,GAAA,IAAA,CAAA,MAAA,EAAA;AACA,QAAA,MAAA,GAAA,QAAA,CAAA,cAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,IAAA,CAAA,QAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,UAAA,IAAA,GAAA,IAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CADA,CAGA;;AACA,UAAA,YAAA,GAAA,IAAA,CAAA,KAAA,CAAA,IAAA,GAAA,GAAA,IAAA,GAAA;AACA,IAAA,MAAA,CAAA,SAAA,GAAA,cAAA,YAAA,kBAAA;AACA,GANA,MAMA;AACA,IAAA,MAAA,CAAA,SAAA,GAAA,EAAA,CADA,CAEA;AACA;AACA;AACA,C,CAGA;;AACA,OAAA,SAAA,eAAA,CAAA,YAAA,EAAA,SAAA,EAAA;AACA,OAAA,IAAA,CAAA,IAAA,YAAA,EAAA;AACA,QAAA,YAAA,CAAA,CAAA,CAAA,CAAA,IAAA,KAAA,SAAA,EAAA;AACA,aAAA,IAAA;AACA;AACA;AACA,C,CAGA;;AACA,OAAA,SAAA,aAAA,CAAA,KAAA,EAAA;AACA,QAAA,SAAA,GAAA,EAAA;;AACA,OAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,CAAA,QAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,UAAA,IAAA,GAAA,IAAA,CAAA,UAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA;AACA,UAAA,GAAA,GAAA,IAAA,CAAA,QAAA,CAAA,IAAA,CAAA,UAAA,CAAA,CAAA,aAAA,CAAA,CAAA;AACA,IAAA,SAAA,CAAA,IAAA,CAAA,GAAA;AACA;;AACA,SAAA,SAAA;AACA,C,CAGA;;AACA,OAAA,SAAA,gBAAA,CAAA,IAAA,EAAA,MAAA,GAAA,GAAA,EAAA;AACA,QAAA,MAAA,GAAA,IAAA,CAAA,SAAA,CAAA,IAAA,EAAA,MAAA,EAAA;AAAA,IAAA,KAAA,EAAA;AAAA,GAAA,CAAA;AACA,SAAA,aAAA,CAAA,MAAA,CAAA;AACA,C,CAGA;;AACA,OAAA,SAAA,eAAA,CAAA,IAAA,EAAA;AACA,QAAA,IAAA,GAAA,IAAA,CAAA,MAAA,EAAA;AACA,SAAA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,QAAA,CAAA,CAAA,EAAA,UAAA,EAAA,aAAA,CAAA,CAAA;AACA,C,CAGA;;AACA,OAAA,SAAA,eAAA,CAAA,IAAA,EAAA;AACA,QAAA,GAAA,GAAA,eAAA,CAAA,IAAA,CAAA;AACA,QAAA,IAAA,GAAA,IAAA,CAAA,aAAA,CAAA,GAAA,CAAA;AACA,QAAA,MAAA,GAAA,IAAA,CAAA,SAAA,CAAA,IAAA,EAAA,IAAA,CAAA;AACA,QAAA,SAAA,GAAA,aAAA,CAAA,MAAA,CAAA;AACA,QAAA,YAAA,GAAA;AACA,YAAA,mBADA;AAEA,gBAAA;AAFA,GAAA;AAIA,QAAA,OAAA,GAAA,IAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CATA,CAUA;;AACA,QAAA,YAAA,GAAA,EAAA;;AACA,OAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,OAAA,CAAA,QAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,UAAA,cAAA,GAAA,IAAA,CAAA,OAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA,EAAA,UAAA,EAAA,aAAA,CAAA,CAAA;AACA,UAAA,WAAA,GAAA,IAAA,CAAA,aAAA,CAAA,cAAA,CAAA;AACA,UAAA,eAAA,GAAA,IAAA,CAAA,WAAA,CAAA,WAAA,CAAA;;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,eAAA,CAAA,QAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,YAAA,eAAA,GAAA,IAAA,CAAA,QAAA,CAAA,eAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA;;AACA,UAAA,IAAA,CAAA,eAAA,CAAA,GAAA,EAAA,eAAA,CAAA,EAAA;AACA,QAAA,YAAA,CAAA,IAAA,CAAA,eAAA,CAAA,QAAA,CAAA,CAAA,CAAA;AACA;AACA;AACA;;AACA,QAAA,mBAAA,GAAA;AACA,YAAA,mBADA;AAEA,gBAAA;AAFA,GAAA;AAIA,QAAA,oBAAA,GAAA,IAAA,CAAA,OAAA,CAAA,mBAAA,CAAA;AACA,QAAA,sBAAA,GAAA,IAAA,CAAA,QAAA,CAAA,oBAAA,EACA;AAAA,IAAA,SAAA,EAAA,CAAA;AAAA,IAAA,MAAA,EAAA;AAAA,GADA,CAAA;AAEA,SAAA,sBAAA;AACA,C,CAGA;;AACA,OAAA,SAAA,kBAAA,CAAA,QAAA,EAAA;AACA,QAAA,iBAAA,GAAA,EAAA;;AACA,OAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,CAAA,EAAA,CAAA,EAAA,EAAA;AACA,UAAA,cAAA,GAAA,IAAA,CAAA,MAAA,CAAA,QAAA,EAAA,MAAA,CAAA,GAAA,CAAA,CAAA,EAAA;AAAA,MAAA,KAAA,EAAA;AAAA,KAAA,CAAA;AACA,UAAA,iBAAA,GAAA,IAAA,CAAA,QAAA,CAAA,cAAA,CAAA;AACA,IAAA,iBAAA,CAAA,IAAA,CAAA,IAAA,CAAA,UAAA,CAAA,iBAAA,CAAA,QAAA,CAAA,CAAA,EAAA,UAAA,EAAA,aAAA,EAAA,CAAA,CAAA,CAAA;AACA;;AACA,SAAA,iBAAA;AACA,C,CAGA;;AACA,OAAA,SAAA,cAAA,CAAA,IAAA,EAAA;AACA,QAAA,MAAA,GAAA,EAAA;AACA,QAAA,QAAA,GAAA,eAAA,CAAA,IAAA,CAAA;AACA,EAAA,MAAA,CAAA,QAAA,GAAA,QAAA,CAAA,QAAA;AACA,QAAA,mBAAA,GAAA,IAAA,CAAA,MAAA,CAAA,QAAA,EAAA,GAAA,EAAA;AAAA,IAAA,KAAA,EAAA;AAAA,GAAA,EAAA,QAAA,CAAA,CAAA,CAAA;AACA,QAAA,YAAA,GAAA,IAAA,CAAA,aAAA,CAAA,mBAAA,CAAA;AACA,QAAA,eAAA,GAAA,gBAAA,CAAA,IAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;AACA,QAAA,sBAAA,GAAA,kBAAA,CAAA,QAAA,CAAA;AACA,EAAA,MAAA,CAAA,sBAAA,GAAA,sBAAA;AACA,EAAA,MAAA,CAAA,kBAAA,GAAA,EAAA;;AACA,OAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,eAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,QAAA,aAAA,GAAA,eAAA,CAAA,CAAA,CAAA;AACA,UAAA,aAAA,GAAA,CAAA,aAAA,CAAA,UAAA,CAAA,CAAA,aAAA,CAAA,CAAA;;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,sBAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,YAAA,MAAA,GAAA,sBAAA,CAAA,CAAA,CAAA;AACA,YAAA,SAAA,GAAA,IAAA,CAAA,kBAAA,CAAA,MAAA,EAAA,IAAA,CAAA,KAAA,CAAA,aAAA,CAAA,UAAA,CAAA,CAAA,aAAA,CAAA,CAAA,CAAA;AACA,MAAA,aAAA,CAAA,IAAA,CAAA,SAAA,CAAA,UAAA,CAAA,CAAA,aAAA,CAAA;AACA,MAAA,aAAA,GAAA,SAAA;AACA;;AACA,IAAA,MAAA,CAAA,kBAAA,CAAA,IAAA,CAAA,IAAA,CAAA,UAAA,CAAA,aAAA,CAAA;AACA;;AACA,EAAA,OAAA,CAAA,GAAA,CAAA,MAAA;AACA,SAAA,MAAA;AACA,C,CAEA;;AACA,OAAA,SAAA,cAAA,CAAA,IAAA,EAAA,WAAA,EAAA;AACA,QAAA,aAAA,GAAA;AAAA,IAAA,KAAA,EAAA;AAAA,GAAA;AACA,QAAA,YAAA,GAAA,cAAA,CAAA,IAAA,CAAA;AACA,QAAA,cAAA,GAAA,IAAA,CAAA,MAAA,CAAA,YAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAA,WAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,aAAA,CAAA;AACA,QAAA,sBAAA,GAAA,IAAA,CAAA,MAAA,CAAA,IAAA,CAAA,iBAAA,CAAA,YAAA,CAAA,kBAAA,CAAA,EAAA,CAAA,WAAA,CAAA,CAAA,CAAA,GAAA,WAAA,CAAA,CAAA,CAAA,IAAA,CAAA,EAAA,aAAA,CAAA;AACA,QAAA,iBAAA,GAAA,IAAA,CAAA,MAAA,CAAA,IAAA,CAAA,iBAAA,CAAA,YAAA,CAAA,sBAAA,CAAA,EAAA,WAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,aAAA,CAAA;AACA,QAAA,UAAA,GAAA,IAAA,CAAA,iBAAA,CAAA,sBAAA,CAAA,QAAA,CAAA,MAAA,CAAA,iBAAA,CAAA,QAAA,EAAA,cAAA,CAAA,CAAA;AACA,QAAA,mBAAA,GAAA,IAAA,CAAA,QAAA,CAAA,UAAA,CAAA;AACA,QAAA,UAAA,GAAA,IAAA,CAAA,UAAA,CAAA,eAAA,CAAA,IAAA,CAAA,EAAA,mBAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA;AACA,SAAA,UAAA;AACA;AAGA,OAAA,SAAA,kBAAA,CAAA,GAAA,EAAA;AACA,MAAA,eAAA,CAAA,GAAA,CAAA,QAAA,GAAA,MAAA,EAAA,SAAA,CAAA,EAAA;AACA,IAAA,GAAA,CAAA,WAAA,CAAA,SAAA;AACA;;AACA,MAAA,UAAA,GAAA,CAAA,QAAA,GAAA,OAAA,EAAA;AACA,IAAA,GAAA,CAAA,YAAA,CAAA,MAAA;AACA;AACA;AAGA,OAAA,SAAA,UAAA,CAAA,MAAA,EAAA,IAAA,EAAA,UAAA,EAAA;AACA,EAAA,kBAAA,CAAA,MAAA,CAAA;AACA,EAAA,MAAA,CAAA,SAAA,CAAA,MAAA,EAAA;AACA,YAAA,SADA;AAEA,YAAA,cAAA,CAAA,IAAA,EAAA,UAAA;AAFA,GAAA;AAIA,EAAA,MAAA,CAAA,QAAA,CAAA;AACA,UAAA,SADA;AAEA,YAAA,MAFA;AAGA,cAAA,MAHA;AAIA,aAAA;AACA,oBAAA,SADA,CACA;;AADA;AAJA,GAAA;AAQA;AAGA,OAAA,SAAA,UAAA,CAAA,MAAA,EAAA,IAAA,EAAA,UAAA,EAAA;AACA,EAAA,UAAA;AACA,EAAA,MAAA,CAAA,SAAA,CAAA,MAAA,EAAA;AACA,YAAA,SADA;AAEA,YAAA,cAAA,CAAA,IAAA,EAAA,UAAA;AAFA,GAAA;AAIA,EAAA,MAAA,CAAA,QAAA,CAAA;AACA,UAAA,SADA;AAEA,YAAA,MAFA;AAGA,cAAA,MAHA;AAIA,aAAA;AACA,oBAAA;AADA;AAJA,GAAA;AAQA;AAGA,eAAA;AACA,EAAA,IAAA,EAAA,iBADA;;AAGA,EAAA,OAAA,GAAA;AACA,SAAA,MAAA,CAAA,QAAA,CAAA,SAAA;AACA,SAAA,MAAA,CAAA,QAAA,CAAA,SAAA,EAFA,CAGA;AACA;AACA;;AACA,SAAA,gBAAA;AACA,GAVA;;AAWA,EAAA,QAAA,EAAA;AACA,IAAA,WAAA,GAAA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,WAAA;AACA,KAHA;;AAIA,IAAA,OAAA,GAAA;AACA,aAAA,KAAA,MAAA,CAAA,OAAA,CAAA,IAAA;AACA,KANA;;AAOA,IAAA,UAAA,GAAA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,UAAA;AACA,KATA;;AAUA,IAAA,MAAA,GAAA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,MAAA;AACA;;AAZA,GAXA;AAyBA,EAAA,UAAA,EAAA;AACA,IAAA;AADA,GAzBA;AA4BA,EAAA,OAAA,EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAA,MAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AACA,UAAA,MAAA,GAAA,CAAA,GAAA,EAAA,GAAA,EAAA,CAAA,CAAA;AACA,aAAA,MAAA,CAAA,EAAA,CACA,MADA,CACA;AAAA,QAAA,KAAA,EAAA,KAAA;AAAA,QAAA,QAAA,EAAA;AAAA,OADA,EAEA,SAFA,CAEA,MAFA,CAAA;AAGA,KA3BA;;AA4BA,IAAA,YAAA,GAAA;AACA,MAAA,KAAA,CAAA,MAAA;AACA,WAAA,MAAA,CAAA,cAAA;AACA,KA/BA;;AAgCA,IAAA,OAAA,GAAA;AACA,MAAA,QAAA,CAAA,WAAA,GAAA,KAAA,WAAA;AACA,WAAA,MAAA,GAAA,IAAA,QAAA,CAAA,GAAA,CAAA;AACA,QAAA,SAAA,EAAA,KADA;AAEA,QAAA,WAAA,EAAA,IAFA;AAGA,QAAA,KAAA,EAAA,iCAHA;AAIA,QAAA,IAAA,EAAA,EAJA;AAKA,QAAA,MAAA,EAAA,CAAA,CAAA,WAAA,EAAA,UAAA,CALA;AAMA,QAAA,KAAA,EAAA,EANA;AAOA,QAAA,OAAA,EAAA,GAPA;AAQA,QAAA,SAAA,EAAA,IARA;AASA,QAAA,kBAAA,EAAA;AATA,OAAA,EAUA,EAVA,CAUA,YAVA,EAUA,MAAA;AACA,QAAA,MAAA,CAAA,EAAA,GAAA,IAAA,QAAA,CACA,KAAA,MADA,EAEA,KAAA,MAAA,CAAA,SAAA,GAAA,UAAA,CAAA,OAAA,CAFA,EAEA;AACA,UAAA,aAAA,EAAA;AADA,SAFA,CAAA,CADA,CAQA;;AACA,YAAA,KAAA,MAAA,CAAA,QAAA,CAAA,cAAA,KAAA,IAAA,EAAA;AAEA,eAAA,MAAA,CAAA,EAAA,CAAA,MAAA,EAAA,MAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA,iBAAA,MAAA,CAAA,QAAA,CAAA;AACA,oBAAA,kBADA;AAEA,wBAAA,WAFA;AAGA,8BAAA,UAHA;AAIA,wBAAA,CAAA,IAAA,EAAA,SAAA,EAAA,MAAA,CAJA;AAKA,sBAAA,gBALA;AAMA,yBAAA,EANA;AAOA,uBAAA;AACA,wCAAA,MADA;AAGA;AACA;AACA;AACA,yCAAA,CACA,aADA,EAEA,CAAA,QAAA,CAFA,EAGA,CAAA,MAAA,CAHA,EAIA,CAJA,EAKA,CALA,EAMA,KANA,EAOA,CAAA,KAAA,EAAA,QAAA,CAPA,CANA;AAeA,uCAAA,CACA,aADA,EAEA,CAAA,QAAA,CAFA,EAGA,CAAA,MAAA,CAHA,EAIA,CAJA,EAKA,CALA,EAMA,KANA,EAOA,CAAA,KAAA,EAAA,YAAA,CAPA,CAfA;AAyBA;AACA,0CAAA;AA1BA;AAPA,aAAA;AAoCA,WArEA,EAFA,CAyEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,OAzHA,CAAA;AA0HA,WAAA,gBAAA;AACA,KA7JA;;AA8JA,IAAA,eAAA,GAAA;AACA;AACA,WAAA,MAAA,GAAA,KAAA,MAAA,CAAA,KAAA,CAAA,MAAA;AACA,YAAA,IAAA,GAAA,IAAA,UAAA,EAAA;AACA,WAAA,MAAA,CAAA,UAAA,CAAA,IAAA,EAAA,WAAA;AACA,WAAA,MAAA,CAAA,MAAA,CAAA,SAAA,EAAA,KAAA,IAAA;AACA,WAAA,IAAA,GAAA,IAAA;AACA,KArKA;;AAsKA,IAAA,gBAAA,GAAA;AACA,WAAA,MAAA,GAAA,KAAA,MAAA,CAAA,KAAA,CAAA,MAAA;AACA,WAAA,IAAA,GAAA,KAAA,MAAA,CAAA,KAAA,CAAA,IAAA;AAEA,WAAA,MAAA,CAAA,EAAA,CAAA,aAAA,EAAA,MAAA;AACA,QAAA,UAAA,CAAA,KAAA,IAAA,CAAA;AACA,OAFA;AAGA,WAAA,MAAA,CAAA,EAAA,CAAA,aAAA,EAAA,MAAA;AACA,QAAA,UAAA,CAAA,KAAA,IAAA,CAAA;AACA,OAFA;AAGA,WAAA,MAAA,CAAA,EAAA,CAAA,aAAA,EAAA,MAAA;AACA,QAAA,UAAA,CAAA,KAAA,IAAA,CAAA;AACA,OAFA;AAIA,WAAA,MAAA,CAAA,EAAA,CAAA,aAAA,EAAA,MAAA;AACA,QAAA,UAAA,CAAA,KAAA,MAAA,EAAA,KAAA,IAAA,EAAA,KAAA,UAAA,CAAA;AACA,OAFA;AAIA,WAAA,MAAA,CAAA,EAAA,CAAA,aAAA,EAAA,MAAA;AACA,QAAA,kBAAA,CAAA,KAAA,MAAA,CAAA;AACA,OAFA;AAIA,WAAA,MAAA,CAAA,EAAA,CAAA,aAAA,EAAA,MAAA;AACA,QAAA,UAAA,CAAA,KAAA,MAAA,EAAA,KAAA,IAAA,EAAA,KAAA,UAAA,CAAA;AACA,OAFA;AAGA;;AA/LA;AA5BA,CAAA","sourcesContent":["<template>\n  <div>\n    <div id=\"map\" v-on:draw=\"generatePolygons()\"></div>\n    <div id=\"vue-range-slider\">\n      <RangeSlider v-on:changeValue=\"generatePolygons()\"/>\n    </div>\n  </div>\n</template>\n\n<script>\nimport mapboxgl from \"mapbox-gl\";\nimport * as MapboxDraw from 'mapbox-gl-draw';\nimport threebox from \"threebox-plugin/dist/threebox\";\nimport { Threebox } from 'threebox-plugin';\nimport Pulse from \"./Pulses/Pulse\";\nimport * as turf from '@turf/turf';\nimport RangeSlider from \"./RangeSlider\"\n\n\nlet pulse = new Pulse(400, 4000, true);\nthreebox\n\n\n// Calculate the area of drawn polygons\nexport function updateArea(draw) {\n    const data = draw.getAll();\n    const answer = document.getElementById('calculated-area');\n    if (data.features.length > 0) {\n      const area = turf.area(data);\n\n      // Restrict the area to 2 decimal points.\n      const rounded_area = Math.round(area * 100) / 100;\n      answer.innerHTML = `<p><strong>${rounded_area}</strong> m²</p>`;\n    } else {\n      answer.innerHTML = '';\n      // if (e.type !== 'draw.delete')\n      //   alert('Click the map to draw a polygon.');\n  }\n}\n\n\n// Returns true if finds a defined key in the input array of dictionaries\nexport function keyInDictionary (dictionaries, keyToFind) {\n    for (var i in dictionaries) {\n        if (dictionaries[i]['id'] == keyToFind) {\n            return true\n        }\n    }\n}\n\n\n// Returns a list of centroids of multiple LineStrings\nexport function lineCentroids(lines) {\n  const centroids = [];\n  for (let i = 0; i < lines.features.length; i++) {\n    const line = turf.lineString(lines.features[i])\n    const ctr = turf.centroid(line['geometry']['coordinates'])\n    centroids.push(ctr)\n  }\n  return centroids\n}\n\n\n// Returns points along a LineString divided according to a specified length in meters\nexport function divideLineString(line, length=100) {\n  const chunks = turf.lineChunk(line, length, {units: 'meters'})\n  return lineCentroids(chunks)\n}\n\n\n// Extract drawn shape and convert it to a polygon\nexport function getPolygonDrawn(draw){\n  const data = draw.getAll()\n  return turf.polygon(data.features[0]['geometry']['coordinates'])\n}\n\n\n// Extract internal skeleton of a shape\nexport function voronoiSkeleton(draw){\n  const pol = getPolygonDrawn(draw)\n  const line = turf.polygonToLine(pol)\n  const chunks = turf.lineChunk(line, 0.01)\n  const centroids = lineCentroids(chunks)\n  const centroids_gj = {\n    \"type\": \"FeatureCollection\",\n    \"features\": centroids\n  }\n  const voronoi = turf.voronoi(centroids_gj)\n  // Iterate over voronoi polygons to extract segments inside drawing\n  const voronoiLines = [];\n  for (let i = 0; i < voronoi.features.length; i++) {\n    const voronoiPolygon = turf.polygon(voronoi.features[i]['geometry']['coordinates']);\n    const voronoiLine = turf.polygonToLine(voronoiPolygon)\n    const voronoiSegments = turf.lineSegment(voronoiLine)\n    for (let i = 0; i < voronoiSegments.features.length; i++) {\n      const segmentCentroid = turf.centroid(voronoiSegments.features[i])\n      if (turf.booleanContains(pol, segmentCentroid)) {\n        voronoiLines.push(voronoiSegments.features[i])\n      }\n    }\n  }\n  const voronoiLinesGeoJSON = {\n    \"type\": \"FeatureCollection\",\n    \"features\": voronoiLines\n  }\n  const voronoiLinesCombined = turf.combine(voronoiLinesGeoJSON)\n  const voronoiLinesSimplified = turf.simplify(voronoiLinesCombined,\n    {tolerance: 5, mutate: true})\n  return voronoiLinesSimplified\n}\n\n\n// Generate skeleton and buffer according to some number of iterations\nexport function bufferDrawSkeleton(skeleton) {\n  const bufferedSkeletons = []\n  for (let i = 0; i < 3; i++) {\n    const skeletonBuffer = turf.buffer(skeleton, 30 * (i+1), {units: 'meters'})\n    const dissolvedSkeleton = turf.dissolve(skeletonBuffer)\n    bufferedSkeletons.push(turf.lineString(dissolvedSkeleton.features[0]['geometry']['coordinates'][0]))\n  }\n  return bufferedSkeletons\n}\n\n\n// Subdivide a drawn shape using Voronoi patterns\nexport function subdivideShape(draw) {\n  const output = {}\n  const skeleton = voronoiSkeleton(draw)\n  output.skeleton = skeleton.features\n  const skeletonBufferSmall = turf.buffer(skeleton, 0.1, {units: 'meters'}).features[0]\n  const skeletonLine = turf.polygonToLine(skeletonBufferSmall)\n  const dividedSkeleton = divideLineString(turf.combine(skeletonLine))\n  const voronoiSkeletonBuffers = bufferDrawSkeleton(skeleton)\n  output.voronoiSkeletonBuffers = voronoiSkeletonBuffers\n  output.perpendicularLines = []\n  for (let i = 0; i < dividedSkeleton.length; i++) {\n    var originalPoint = dividedSkeleton[i]\n    const nearestPoints = [originalPoint['geometry']['coordinates']]\n    for (let j = 0; j < voronoiSkeletonBuffers.length; j++) {\n      const buffer = voronoiSkeletonBuffers[j]\n      const nextPoint = turf.nearestPointOnLine(buffer, turf.point(originalPoint['geometry']['coordinates']))\n      nearestPoints.push(nextPoint['geometry']['coordinates'])\n      originalPoint = nextPoint\n    }\n    output.perpendicularLines.push(turf.lineString(nearestPoints))\n  }\n  console.log(output)\n  return output\n}\n\n// Buffer generated lines according to buffer range and subtract from original drawing\nexport function generateBlocks(draw, bufferRange) {\n  const bufferOptions = {units: 'meters'}\n  const subdivisions = subdivideShape(draw)\n  const skeletonBuffer = turf.buffer(subdivisions.skeleton[0], bufferRange[1]/2, bufferOptions)\n  const perpendicularsBuffered = turf.buffer(turf.featureCollection(subdivisions.perpendicularLines), (bufferRange[0] + bufferRange[1])/4, bufferOptions)\n  const parallelsBuffered = turf.buffer(turf.featureCollection(subdivisions.voronoiSkeletonBuffers), bufferRange[0]/2, bufferOptions)\n  const allBuffers = turf.featureCollection(perpendicularsBuffered.features.concat(parallelsBuffered.features, skeletonBuffer))\n  const bufferedCenterlines = turf.dissolve(allBuffers)\n  const difference = turf.difference(getPolygonDrawn(draw), bufferedCenterlines.features[0])\n  return difference\n}\n\n\nexport function deleteOutlineDraws(map) {\n  if (keyInDictionary(map.getStyle().layers, 'outline')) {\n    map.removeLayer('outline')\n  }\n  if ('draw' in map.getStyle().sources) {\n    map.removeSource('draw')\n  }\n}\n\n\nexport function updateDraw(mapbox, draw, widthRange) {\n  deleteOutlineDraws(mapbox)\n  mapbox.addSource('draw', {\n    'type': 'geojson',\n    'data': generateBlocks(draw, widthRange),\n  });\n  mapbox.addLayer({\n    'id': 'outline',\n    'type': 'fill',\n    'source': 'draw',\n    'paint': {\n      'fill-color': '#06be7f' // red color\n    }\n  });\n}\n\n\nexport function createDraw(mapbox, draw, widthRange) {\n  widthRange\n  mapbox.addSource('draw', {\n    'type': 'geojson',\n    'data': generateBlocks(draw, widthRange),\n  });\n  mapbox.addLayer({\n    'id': 'outline',\n    'type': 'fill',\n    'source': 'draw',\n    'paint': {\n      'fill-color': '#06be7f',\n    }\n  });\n}\n\n\nexport default {\n  name: \"ThreeboxExample\",\n\n  mounted() {\n    this.$store.dispatch('loadMap')\n    this.$store.dispatch('setDraw')\n    // this.$store.dispatch('generatePolygons')\n    // this.initMap()\n    // this.addDrawControls()\n    this.generatePolygons()\n  },\n  computed: {\n    accessToken(){\n      return this.$store.state.accessToken\n    },\n    getDraw(){\n      return this.$store.getters.draw\n    },\n    widthRange(){\n      return this.$store.state.widthRange\n    },\n    getMap(){\n      return this.$store.state.mapbox\n    },\n  },\n  components: {\n    RangeSlider\n  },\n  methods: {\n    // loadMap (context) {\n    //   mapboxgl.accessToken = this.state.accessToken\n    //   var mapbox = new mapboxgl.Map({\n    //     container: \"map\",\n    //     interactive: true,\n    //     style:  \"mapbox://styles/mapbox/dark-v10\",\n    //     zoom: 16,\n    //     center: [-123.1068658, 49.2626982],\n    //     pitch: 60,\n    //     bearing: 360,\n    //     antialias: true,\n    //     attributionControl: false\n    //   })\n    //   context.commit('loadMap', mapbox)\n    // },\n    // setDraw (context) {\n    //   // Add draw controls\n    //   const draw = new MapboxDraw();\n    //   this.state.mapbox.addControl(draw, 'top-right');\n    //   context.commit('setDraw', this.draw)\n    // },\n    sphere(lon, lat) {\n      let origin = [lon, lat, 0];\n      return window.tb\n        .sphere({ color: \"red\", material: \"MeshToonMaterial\" })\n        .setCoords(origin);\n    },\n    animatePulse() {\n      pulse.update();\n      this.mapbox.triggerRepaint();\n    },\n    initMap() {\n      mapboxgl.accessToken = this.accessToken;\n      this.mapbox = new mapboxgl.Map({\n        container: \"map\",\n        interactive: true,\n        style:  \"mapbox://styles/mapbox/dark-v10\",\n        zoom: 16,\n        center: [-123.1068658, 49.2626982],\n        pitch: 60,\n        bearing: 360,\n        antialias: true,\n        attributionControl: false\n      }).on(\"style.load\", () => {\n        window.tb = new Threebox(\n          this.mapbox,\n          this.mapbox.getCanvas().getContext(\"webgl\"), {\n            defaultLights: true,\n          }\n        );\n\n        // Add draw control\n        if (this.mapbox.getLayer(\"custom_layer\") == null) {\n\n          this.mapbox.on('load', () => {\n\n            // // Add 3D terrain\n            // this.mapbox.addSource('mapbox-dem', {\n            //   'type': 'raster-dem',\n            //   'url': 'mapbox://mapbox.mapbox-terrain-dem-v1',\n            //   'tileSize': 512,\n            //   'maxzoom': 20\n            // });\n            //\n            // // add the DEM source as a terrain layer with exaggerated height\n            // this.mapbox.setTerrain({ 'source': 'mapbox-dem', 'exaggeration': 1.5 });\n\n            // // Add parcels layer source (CoV)\n            // this.mapbox.addSource('property-parcel-polygons', {\n            //   'type': 'geojson',\n            //   'data': 'https://raw.githubusercontent.com/nicholasmartino/vue-threebox/master/public/data/property-parcel-polygons.geojson',\n            // });\n            //\n            // // Add parcels layer to map\n            // this.mapbox.addLayer({\n            //   'id': 'property-parcel-polygons-shp',\n            //   'type': 'fill',\n            //   'source': 'property-parcel-polygons',\n            //   'paint': {\n            //     'fill-color': '#0080ff', // blue color fill\n            //     'fill-opacity': 0.2,\n            //   },\n            // });\n\n            // The 'building' layer in the Mapbox Streets\n            // vector tileset contains building height data\n            // from OpenStreetMap.\n            this.mapbox.addLayer({\n              'id': 'add-3d-buildings',\n              'source': 'composite',\n              'source-layer': 'building',\n              'filter': ['==', 'extrude', 'true'],\n              'type': 'fill-extrusion',\n              'minzoom': 12,\n              'paint': {\n                'fill-extrusion-color': '#aaa',\n\n                // Use an 'interpolate' expression to\n                // add a smooth transition effect to\n                // the buildings as the user zooms in.\n                'fill-extrusion-height': [\n                  'interpolate',\n                  ['linear'],\n                  ['zoom'],\n                  9,\n                  0,\n                  15.05,\n                  ['get', 'height']\n                ],\n                'fill-extrusion-base': [\n                  'interpolate',\n                  ['linear'],\n                  ['zoom'],\n                  9,\n                  0,\n                  15.05,\n                  ['get', 'min_height']\n                ],\n\n                // 'fill-extrusion-height': ['get', 'height'],\n                'fill-extrusion-opacity': 0.8,\n              },\n            });\n          });\n\n          // // Add spheres to map\n          // const _this = this\n          // this.mapbox.addLayer({\n          //   id: \"custom_layer\",\n          //   type: \"custom\",\n          //   renderingMode: \"3d\",\n          //\n          //   onAdd: function (map, mbxContext) {\n          //     window.tb.add(_this.sphere(-123.1068658, 49.2626982));\n          //     window.tb.add(_this.sphere(-123.1088658, 49.2626982));\n          //     console.log(map)\n          //     console.log(mbxContext)\n          //     let pulseObj = window.tb\n          //       .Object3D({ obj: pulse, units: \"meters\" })\n          //       .setCoords([-123.1068658, 49.2626982, 0]);\n          //\n          //     pulseObj.setAnchor(\"bottom-left\");\n          //\n          //     window.tb.add(pulseObj);\n          //   },\n          //   render: function (gl, matrix) {\n          //     window.tb.update();\n          //     _this.animatePulse();\n          //     console.log(gl)\n          //     console.log(matrix)\n          //   },\n          // });\n\n        }\n      });\n      this.generatePolygons()\n    },\n    addDrawControls() {\n      // Add draw controls\n      this.mapbox = this.$store.state.mapbox\n      const draw = new MapboxDraw();\n      this.mapbox.addControl(draw, 'top-right');\n      this.$store.commit('setDraw', this.draw)\n      this.draw = draw\n    },\n    generatePolygons() {\n      this.mapbox = this.$store.state.mapbox\n      this.draw = this.$store.state.draw\n\n      this.mapbox.on('draw.create', () => {\n        updateArea(this.draw)\n      })\n      this.mapbox.on('draw.delete', () => {\n        updateArea(this.draw)\n      })\n      this.mapbox.on('draw.update', () => {\n        updateArea(this.draw)\n      })\n\n      this.mapbox.on('draw.create', () => {\n        createDraw(this.mapbox, this.draw, this.widthRange)\n      });\n\n      this.mapbox.on('draw.delete', () => {\n        deleteOutlineDraws(this.mapbox)\n      });\n\n      this.mapbox.on('draw.update', () => {\n        updateDraw(this.mapbox, this.draw, this.widthRange)\n      });\n    }\n  },\n};\n\n\n\n</script>\n\n\n<style>\n#map {\n  position: absolute;\n  width: 100vw;\n  height: 100vh;\n}\n@import \"https://api.mapbox.com/mapbox-gl-js/v0.42.0/mapbox-gl.css\";\n@import \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.2.2/mapbox-gl-draw.css\";\n@import \"https://api.tiles.mapbox.com/mapbox-gl-js/v0.53.0/mapbox-gl.css\";\n.mapboxgl-ctrl-group button {\n    width: 29px;\n    height: 29px;\n    display: block;\n    padding: 0;\n    outline: none;\n    border: 0;\n    box-sizing: border-box;\n    background-color: transparent;\n    cursor: pointer;\n    overflow: hidden;\n}\n.mapboxgl-ctrl-top-right {\n    top: 0;\n    right: 0;\n    position: absolute;\n}\n.marker:before {\n  content: \"\";\n  cursor: pointer;\n  position: absolute;\n  width: 25px;\n  height: 25px;\n  border: 1px solid #ccc;\n  border-radius: 75% 45% 75% 0%;\n  background: #3498db;\n  bottom: 0;\n  transform-origin: 0% 100%;\n  transform: rotate(-45deg) scale(1);\n}\n</style>\n"],"sourceRoot":"src/components"}]}