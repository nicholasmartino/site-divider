{"remainingRequest":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/babel-loader/lib/index.js!/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/src/components/ThreeboxExample.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/src/components/ThreeboxExample.vue","mtime":1637981430000},{"path":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/cache-loader/dist/cjs.js","mtime":1637704935000},{"path":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/babel-loader/lib/index.js","mtime":1637705426000},{"path":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/cache-loader/dist/cjs.js","mtime":1637704935000},{"path":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/vue-loader/lib/index.js","mtime":1637705662000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KaW1wb3J0IG1hcGJveGdsIGZyb20gIm1hcGJveC1nbCI7CmltcG9ydCAqIGFzIE1hcGJveERyYXcgZnJvbSAnbWFwYm94LWdsLWRyYXcnOwppbXBvcnQgdGhyZWVib3ggZnJvbSAidGhyZWVib3gtcGx1Z2luL2Rpc3QvdGhyZWVib3giOwppbXBvcnQgeyBUaHJlZWJveCB9IGZyb20gJ3RocmVlYm94LXBsdWdpbic7CmltcG9ydCBQdWxzZSBmcm9tICIuL1B1bHNlcy9QdWxzZSI7CmltcG9ydCAqIGFzIHR1cmYgZnJvbSAndHVyZic7CmxldCBwdWxzZSA9IG5ldyBQdWxzZSg0MDAsIDQwMDAsIHRydWUpOwp0aHJlZWJveDsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJUaHJlZWJveEV4YW1wbGUiLAoKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgYWNjZXNzVG9rZW46ICJway5leUoxSWpvaWJtbGphRzlzWVhOdFlYSjBhVzV2SWl3aVlTSTZJbU5yTWpWaE9HcGhPVEF6WkdVemJHOHdOSEpoZFRack1tWWlmUS45OHVETW5HSXZuMXpydzRaV1VPMzVnIgogICAgfTsKICB9LAoKICBtb3VudGVkKCkgewogICAgbWFwYm94Z2wuYWNjZXNzVG9rZW4gPSB0aGlzLmFjY2Vzc1Rva2VuOwogICAgdGhpcy5tYXAgPSBuZXcgbWFwYm94Z2wuTWFwKHsKICAgICAgY29udGFpbmVyOiAibWFwIiwKICAgICAgaW50ZXJhY3RpdmU6IHRydWUsCiAgICAgIHN0eWxlOiAibWFwYm94Oi8vc3R5bGVzL21hcGJveC9saWdodC12MTAiLAogICAgICB6b29tOiAxNiwKICAgICAgY2VudGVyOiBbLTEyMy4xMDY4NjU4LCA0OS4yNjI2OTgyXSwKICAgICAgcGl0Y2g6IDYwLAogICAgICBiZWFyaW5nOiAzNjAsCiAgICAgIGFudGlhbGlhczogdHJ1ZQogICAgfSkub24oInN0eWxlLmxvYWQiLCAoKSA9PiB7CiAgICAgIHdpbmRvdy50YiA9IG5ldyBUaHJlZWJveCh0aGlzLm1hcCwgdGhpcy5tYXAuZ2V0Q2FudmFzKCkuZ2V0Q29udGV4dCgid2ViZ2wiKSwgewogICAgICAgIGRlZmF1bHRMaWdodHM6IHRydWUKICAgICAgfSk7IC8vIGxldCBfdGhpcyA9IHRoaXM7CiAgICAgIC8vIEFkZCBkcmF3IGNvbnRyb2wKCiAgICAgIGlmICh0aGlzLm1hcC5nZXRMYXllcigiY3VzdG9tX2xheWVyIikgPT0gbnVsbCkgewogICAgICAgIGNvbnN0IGRyYXcgPSBuZXcgTWFwYm94RHJhdyh7CiAgICAgICAgICBkaXNwbGF5Q29udHJvbHNEZWZhdWx0OiBmYWxzZSwKICAgICAgICAgIC8vIFNlbGVjdCB3aGljaCBtYXBib3gtZ2wtZHJhdyBjb250cm9sIGJ1dHRvbnMgdG8gYWRkIHRvIHRoZSBtYXAuCiAgICAgICAgICBjb250cm9sczogewogICAgICAgICAgICBwb2x5Z29uOiB0cnVlLAogICAgICAgICAgICB0cmFzaDogdHJ1ZQogICAgICAgICAgfSwKICAgICAgICAgIC8vIFNldCBtYXBib3gtZ2wtZHJhdyB0byBkcmF3IGJ5IGRlZmF1bHQuCiAgICAgICAgICAvLyBUaGUgdXNlciBkb2VzIG5vdCBoYXZlIHRvIGNsaWNrIHRoZSBwb2x5Z29uIGNvbnRyb2wgYnV0dG9uIGZpcnN0LgogICAgICAgICAgZGVmYXVsdE1vZGU6ICdkcmF3X3BvbHlnb24nCiAgICAgICAgfSk7CiAgICAgICAgdGhpcy5tYXAuYWRkQ29udHJvbChkcmF3KTsKICAgICAgICB0aGlzLm1hcC5vbignZHJhdy5jcmVhdGUnLCB1cGRhdGVBcmVhKTsKICAgICAgICB0aGlzLm1hcC5vbignZHJhdy5kZWxldGUnLCB1cGRhdGVBcmVhKTsKICAgICAgICB0aGlzLm1hcC5vbignZHJhdy51cGRhdGUnLCB1cGRhdGVBcmVhKTsKCiAgICAgICAgZnVuY3Rpb24gdXBkYXRlQXJlYShlKSB7CiAgICAgICAgICBjb25zdCBkYXRhID0gZHJhdy5nZXRBbGwoKTsKICAgICAgICAgIGNvbnN0IGFuc3dlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYWxjdWxhdGVkLWFyZWEnKTsKCiAgICAgICAgICBpZiAoZGF0YS5mZWF0dXJlcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIGNvbnN0IGFyZWEgPSB0dXJmLmFyZWEoZGF0YSk7IC8vIFJlc3RyaWN0IHRoZSBhcmVhIHRvIDIgZGVjaW1hbCBwb2ludHMuCgogICAgICAgICAgICBjb25zdCByb3VuZGVkX2FyZWEgPSBNYXRoLnJvdW5kKGFyZWEgKiAxMDApIC8gMTAwOwogICAgICAgICAgICBhbnN3ZXIuaW5uZXJIVE1MID0gYDxwPjxzdHJvbmc+JHtyb3VuZGVkX2FyZWF9PC9zdHJvbmc+PC9wPjxwPnNxdWFyZSBtZXRlcnM8L3A+YDsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGFuc3dlci5pbm5lckhUTUwgPSAnJzsKICAgICAgICAgICAgaWYgKGUudHlwZSAhPT0gJ2RyYXcuZGVsZXRlJykgYWxlcnQoJ0NsaWNrIHRoZSBtYXAgdG8gZHJhdyBhIHBvbHlnb24uJyk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB0aGlzLm1hcC5vbignbG9hZCcsICgpID0+IHsKICAgICAgICAgIC8vIEFkZCAzRCB0ZXJyYWluCiAgICAgICAgICB0aGlzLm1hcC5hZGRTb3VyY2UoJ21hcGJveC1kZW0nLCB7CiAgICAgICAgICAgICd0eXBlJzogJ3Jhc3Rlci1kZW0nLAogICAgICAgICAgICAndXJsJzogJ21hcGJveDovL21hcGJveC5tYXBib3gtdGVycmFpbi1kZW0tdjEnLAogICAgICAgICAgICAndGlsZVNpemUnOiA1MTIsCiAgICAgICAgICAgICdtYXh6b29tJzogMjAKICAgICAgICAgIH0pOyAvLyBhZGQgdGhlIERFTSBzb3VyY2UgYXMgYSB0ZXJyYWluIGxheWVyIHdpdGggZXhhZ2dlcmF0ZWQgaGVpZ2h0CgogICAgICAgICAgdGhpcy5tYXAuc2V0VGVycmFpbih7CiAgICAgICAgICAgICdzb3VyY2UnOiAnbWFwYm94LWRlbScsCiAgICAgICAgICAgICdleGFnZ2VyYXRpb24nOiAxLjUKICAgICAgICAgIH0pOyAvLyBBZGQgcGFyY2VscyBsYXllciBzb3VyY2UgKENvVikKCiAgICAgICAgICB0aGlzLm1hcC5hZGRTb3VyY2UoJ3Byb3BlcnR5LXBhcmNlbC1wb2x5Z29ucycsIHsKICAgICAgICAgICAgJ3R5cGUnOiAnZ2VvanNvbicsCiAgICAgICAgICAgICdkYXRhJzogJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9uaWNob2xhc21hcnRpbm8vdnVlLXRocmVlYm94L21hc3Rlci9wdWJsaWMvZGF0YS9wcm9wZXJ0eS1wYXJjZWwtcG9seWdvbnMuZ2VvanNvbicKICAgICAgICAgIH0pOyAvLyBBZGQgcGFyY2VscyBsYXllciB0byBtYXAKCiAgICAgICAgICB0aGlzLm1hcC5hZGRMYXllcih7CiAgICAgICAgICAgICdpZCc6ICdwcm9wZXJ0eS1wYXJjZWwtcG9seWdvbnMtc2hwJywKICAgICAgICAgICAgJ3R5cGUnOiAnZmlsbCcsCiAgICAgICAgICAgICdzb3VyY2UnOiAncHJvcGVydHktcGFyY2VsLXBvbHlnb25zJywKICAgICAgICAgICAgJ3BhaW50JzogewogICAgICAgICAgICAgICdmaWxsLWNvbG9yJzogJyMwMDgwZmYnLAogICAgICAgICAgICAgIC8vIGJsdWUgY29sb3IgZmlsbAogICAgICAgICAgICAgICdmaWxsLW9wYWNpdHknOiAwLjIKICAgICAgICAgICAgfQogICAgICAgICAgfSk7IC8vIFRoZSAnYnVpbGRpbmcnIGxheWVyIGluIHRoZSBNYXBib3ggU3RyZWV0cwogICAgICAgICAgLy8gdmVjdG9yIHRpbGVzZXQgY29udGFpbnMgYnVpbGRpbmcgaGVpZ2h0IGRhdGEKICAgICAgICAgIC8vIGZyb20gT3BlblN0cmVldE1hcC4KCiAgICAgICAgICB0aGlzLm1hcC5hZGRMYXllcih7CiAgICAgICAgICAgICdpZCc6ICdhZGQtM2QtYnVpbGRpbmdzJywKICAgICAgICAgICAgJ3NvdXJjZSc6ICdjb21wb3NpdGUnLAogICAgICAgICAgICAnc291cmNlLWxheWVyJzogJ2J1aWxkaW5nJywKICAgICAgICAgICAgJ2ZpbHRlcic6IFsnPT0nLCAnZXh0cnVkZScsICd0cnVlJ10sCiAgICAgICAgICAgICd0eXBlJzogJ2ZpbGwtZXh0cnVzaW9uJywKICAgICAgICAgICAgJ21pbnpvb20nOiAxMiwKICAgICAgICAgICAgJ3BhaW50JzogewogICAgICAgICAgICAgICdmaWxsLWV4dHJ1c2lvbi1jb2xvcic6ICcjYWFhJywKICAgICAgICAgICAgICAvLyAvLyBVc2UgYW4gJ2ludGVycG9sYXRlJyBleHByZXNzaW9uIHRvCiAgICAgICAgICAgICAgLy8gLy8gYWRkIGEgc21vb3RoIHRyYW5zaXRpb24gZWZmZWN0IHRvCiAgICAgICAgICAgICAgLy8gLy8gdGhlIGJ1aWxkaW5ncyBhcyB0aGUgdXNlciB6b29tcyBpbi4KICAgICAgICAgICAgICAvLyAnZmlsbC1leHRydXNpb24taGVpZ2h0JzogWwogICAgICAgICAgICAgIC8vICAgJ2ludGVycG9sYXRlJywKICAgICAgICAgICAgICAvLyAgIFsnbGluZWFyJ10sCiAgICAgICAgICAgICAgLy8gICBbJ3pvb20nXSwKICAgICAgICAgICAgICAvLyAgIDksCiAgICAgICAgICAgICAgLy8gICAwLAogICAgICAgICAgICAgIC8vICAgMTUuMDUsCiAgICAgICAgICAgICAgLy8gICBbJ2dldCcsICdoZWlnaHQnXQogICAgICAgICAgICAgIC8vIF0sCiAgICAgICAgICAgICAgLy8gJ2ZpbGwtZXh0cnVzaW9uLWJhc2UnOiBbCiAgICAgICAgICAgICAgLy8gICAnaW50ZXJwb2xhdGUnLAogICAgICAgICAgICAgIC8vICAgWydsaW5lYXInXSwKICAgICAgICAgICAgICAvLyAgIFsnem9vbSddLAogICAgICAgICAgICAgIC8vICAgOSwKICAgICAgICAgICAgICAvLyAgIDAsCiAgICAgICAgICAgICAgLy8gICAxNS4wNSwKICAgICAgICAgICAgICAvLyAgIFsnZ2V0JywgJ21pbl9oZWlnaHQnXQogICAgICAgICAgICAgIC8vIF0sCiAgICAgICAgICAgICAgJ2ZpbGwtZXh0cnVzaW9uLWhlaWdodCc6IFsnZ2V0JywgJ2hlaWdodCddLAogICAgICAgICAgICAgICdmaWxsLWV4dHJ1c2lvbi1vcGFjaXR5JzogMC44CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0pOyAvLyAvLyBBZGQgc3BoZXJlcyB0byBtYXAKICAgICAgICAvLyB0aGlzLm1hcC5hZGRMYXllcih7CiAgICAgICAgLy8gICBpZDogImN1c3RvbV9sYXllciIsCiAgICAgICAgLy8gICB0eXBlOiAiY3VzdG9tIiwKICAgICAgICAvLyAgIHJlbmRlcmluZ01vZGU6ICIzZCIsCiAgICAgICAgLy8KICAgICAgICAvLyAgIG9uQWRkOiBmdW5jdGlvbiAobWFwLCBtYnhDb250ZXh0KSB7CiAgICAgICAgLy8gICAgIHdpbmRvdy50Yi5hZGQoX3RoaXMuc3BoZXJlKC0xMjMuMTA2ODY1OCwgNDkuMjYyNjk4MikpOwogICAgICAgIC8vICAgICB3aW5kb3cudGIuYWRkKF90aGlzLnNwaGVyZSgtMTIzLjEwODg2NTgsIDQ5LjI2MjY5ODIpKTsKICAgICAgICAvLwogICAgICAgIC8vICAgICBsZXQgcHVsc2VPYmogPSB3aW5kb3cudGIKICAgICAgICAvLyAgICAgICAuT2JqZWN0M0QoeyBvYmo6IHB1bHNlLCB1bml0czogIm1ldGVycyIgfSkKICAgICAgICAvLyAgICAgICAuc2V0Q29vcmRzKFstMTIzLjEwNjg2NTgsIDQ5LjI2MjY5ODIsIDBdKTsKICAgICAgICAvLwogICAgICAgIC8vICAgICBwdWxzZU9iai5zZXRBbmNob3IoImJvdHRvbS1sZWZ0Iik7CiAgICAgICAgLy8KICAgICAgICAvLyAgICAgd2luZG93LnRiLmFkZChwdWxzZU9iaik7CiAgICAgICAgLy8gICB9LAogICAgICAgIC8vICAgcmVuZGVyOiBmdW5jdGlvbiAoZ2wsIG1hdHJpeCkgewogICAgICAgIC8vICAgICB3aW5kb3cudGIudXBkYXRlKCk7CiAgICAgICAgLy8gICAgIF90aGlzLmFuaW1hdGVQdWxzZSgpOwogICAgICAgIC8vICAgfSwKICAgICAgICAvLyB9KTsKICAgICAgfQogICAgfSk7CiAgfSwKCiAgbWV0aG9kczogewogICAgc3BoZXJlKGxvbiwgbGF0KSB7CiAgICAgIGxldCBvcmlnaW4gPSBbbG9uLCBsYXQsIDBdOwogICAgICByZXR1cm4gd2luZG93LnRiLnNwaGVyZSh7CiAgICAgICAgY29sb3I6ICJyZWQiLAogICAgICAgIG1hdGVyaWFsOiAiTWVzaFRvb25NYXRlcmlhbCIKICAgICAgfSkuc2V0Q29vcmRzKG9yaWdpbik7CiAgICB9LAoKICAgIGFuaW1hdGVQdWxzZSgpIHsKICAgICAgcHVsc2UudXBkYXRlKCk7CiAgICAgIHRoaXMubWFwLnRyaWdnZXJSZXBhaW50KCk7CiAgICB9CgogIH0KfTs="},{"version":3,"sources":["ThreeboxExample.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"map\" />\n</template>\n\n<script>\nimport mapboxgl from \"mapbox-gl\";\nimport * as MapboxDraw from 'mapbox-gl-draw';\nimport threebox from \"threebox-plugin/dist/threebox\";\nimport { Threebox } from 'threebox-plugin';\nimport Pulse from \"./Pulses/Pulse\";\nimport * as turf from 'turf';\n\nlet pulse = new Pulse(400, 4000, true);\nthreebox\n\nexport default {\n  name: \"ThreeboxExample\",\n  data() {\n    return {\n      accessToken:\n        \"pk.eyJ1IjoibmljaG9sYXNtYXJ0aW5vIiwiYSI6ImNrMjVhOGphOTAzZGUzbG8wNHJhdTZrMmYifQ.98uDMnGIvn1zrw4ZWUO35g\",\n    };\n  },\n  mounted() {\n    mapboxgl.accessToken = this.accessToken;\n\n    this.map = new mapboxgl.Map({\n      container: \"map\",\n      interactive: true,\n      style: \"mapbox://styles/mapbox/light-v10\",\n      zoom: 16,\n      center: [-123.1068658, 49.2626982],\n      pitch: 60,\n      bearing: 360,\n      antialias: true,\n    }).on(\"style.load\", () => {\n      window.tb = new Threebox(\n        this.map,\n        this.map.getCanvas().getContext(\"webgl\"),\n        {\n          defaultLights: true,\n        }\n      );\n\n      // let _this = this;\n\n      // Add draw control\n      if (this.map.getLayer(\"custom_layer\") == null) {\n        const draw = new MapboxDraw({\n            displayControlsDefault: false,\n            // Select which mapbox-gl-draw control buttons to add to the map.\n            controls: {\n              polygon: true,\n              trash: true\n            },\n            // Set mapbox-gl-draw to draw by default.\n            // The user does not have to click the polygon control button first.\n            defaultMode: 'draw_polygon'\n          });\n        this.map.addControl(draw);\n\n        this.map.on('draw.create', updateArea);\n        this.map.on('draw.delete', updateArea);\n        this.map.on('draw.update', updateArea);\n\n        function updateArea(e) {\n            const data = draw.getAll();\n            const answer = document.getElementById('calculated-area');\n            if (data.features.length > 0) {\n              const area = turf.area(data);\n              // Restrict the area to 2 decimal points.\n              const rounded_area = Math.round(area * 100) / 100;\n              answer.innerHTML = `<p><strong>${rounded_area}</strong></p><p>square meters</p>`;\n            } else {\n              answer.innerHTML = '';\n              if (e.type !== 'draw.delete')\n                alert('Click the map to draw a polygon.');\n          }\n        }\n\n        this.map.on('load', () => {\n\n          // Add 3D terrain\n          this.map.addSource('mapbox-dem', {\n            'type': 'raster-dem',\n            'url': 'mapbox://mapbox.mapbox-terrain-dem-v1',\n            'tileSize': 512,\n            'maxzoom': 20\n          });\n          // add the DEM source as a terrain layer with exaggerated height\n          this.map.setTerrain({ 'source': 'mapbox-dem', 'exaggeration': 1.5 });\n\n          // Add parcels layer source (CoV)\n          this.map.addSource('property-parcel-polygons', {\n            'type': 'geojson',\n            'data': 'https://raw.githubusercontent.com/nicholasmartino/vue-threebox/master/public/data/property-parcel-polygons.geojson',\n          });\n\n          // Add parcels layer to map\n          this.map.addLayer({\n            'id': 'property-parcel-polygons-shp',\n            'type': 'fill',\n            'source': 'property-parcel-polygons',\n            'paint': {\n              'fill-color': '#0080ff', // blue color fill\n              'fill-opacity': 0.2,\n            },\n          });\n\n          // The 'building' layer in the Mapbox Streets\n          // vector tileset contains building height data\n          // from OpenStreetMap.\n          this.map.addLayer({\n            'id': 'add-3d-buildings',\n            'source': 'composite',\n            'source-layer': 'building',\n            'filter': ['==', 'extrude', 'true'],\n            'type': 'fill-extrusion',\n            'minzoom': 12,\n            'paint': {\n              'fill-extrusion-color': '#aaa',\n\n              // // Use an 'interpolate' expression to\n              // // add a smooth transition effect to\n              // // the buildings as the user zooms in.\n              // 'fill-extrusion-height': [\n              //   'interpolate',\n              //   ['linear'],\n              //   ['zoom'],\n              //   9,\n              //   0,\n              //   15.05,\n              //   ['get', 'height']\n              // ],\n              // 'fill-extrusion-base': [\n              //   'interpolate',\n              //   ['linear'],\n              //   ['zoom'],\n              //   9,\n              //   0,\n              //   15.05,\n              //   ['get', 'min_height']\n              // ],\n\n              'fill-extrusion-height': ['get', 'height'],\n              'fill-extrusion-opacity': 0.8,\n            },\n            },\n          );\n\n\n\n        });\n\n\n\n        // // Add spheres to map\n        // this.map.addLayer({\n        //   id: \"custom_layer\",\n        //   type: \"custom\",\n        //   renderingMode: \"3d\",\n        //\n        //   onAdd: function (map, mbxContext) {\n        //     window.tb.add(_this.sphere(-123.1068658, 49.2626982));\n        //     window.tb.add(_this.sphere(-123.1088658, 49.2626982));\n        //\n        //     let pulseObj = window.tb\n        //       .Object3D({ obj: pulse, units: \"meters\" })\n        //       .setCoords([-123.1068658, 49.2626982, 0]);\n        //\n        //     pulseObj.setAnchor(\"bottom-left\");\n        //\n        //     window.tb.add(pulseObj);\n        //   },\n        //   render: function (gl, matrix) {\n        //     window.tb.update();\n        //     _this.animatePulse();\n        //   },\n        // });\n\n      }\n    });\n  },\n  methods: {\n    sphere(lon, lat) {\n      let origin = [lon, lat, 0];\n      return window.tb\n        .sphere({ color: \"red\", material: \"MeshToonMaterial\" })\n        .setCoords(origin);\n    },\n    animatePulse() {\n      pulse.update();\n      this.map.triggerRepaint();\n    },\n  },\n};\n</script>\n\n<style scoped>\n#map {\n  width: 100%;\n  height: 100%;\n  padding: 0;\n  margin: 0;\n}\n</style>\n"],"sourceRoot":"src/components"}]}