{"remainingRequest":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/babel-loader/lib/index.js!/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/vue-loader/lib/index.js??vue-loader-options!/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/src/components/ThreeboxExample.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/src/components/ThreeboxExample.vue","mtime":1638379651000},{"path":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/cache-loader/dist/cjs.js","mtime":1637704935000},{"path":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/babel-loader/lib/index.js","mtime":1637705426000},{"path":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/cache-loader/dist/cjs.js","mtime":1637704935000},{"path":"/Volumes/GoogleDrive/My Drive/JavaScript/vue-threebox-sample/node_modules/vue-loader/lib/index.js","mtime":1637705662000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["ThreeboxExample.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"map\"></div>\n</template>\n\n<script>\nimport mapboxgl from \"mapbox-gl\";\nimport * as MapboxDraw from 'mapbox-gl-draw';\nimport threebox from \"threebox-plugin/dist/threebox\";\nimport { Threebox } from 'threebox-plugin';\nimport Pulse from \"./Pulses/Pulse\";\nimport * as turf from '@turf/turf';\n\n\nlet pulse = new Pulse(400, 4000, true);\nthreebox\n\nexport default {\n  name: \"ThreeboxExample\",\n  data() {\n    return {\n      accessToken:\n        \"pk.eyJ1IjoibmljaG9sYXNtYXJ0aW5vIiwiYSI6ImNrMjVhOGphOTAzZGUzbG8wNHJhdTZrMmYifQ.98uDMnGIvn1zrw4ZWUO35g\",\n    };\n  },\n  mounted() {\n    mapboxgl.accessToken = this.accessToken;\n\n    this.map = new mapboxgl.Map({\n      container: \"map\",\n      interactive: true,\n      style:  \"mapbox://styles/mapbox/light-v10\",\n      zoom: 16,\n      center: [-123.1068658, 49.2626982],\n      pitch: 60,\n      bearing: 360,\n      antialias: true,\n      // attributionControl: false\n    }).on(\"style.load\", () => {\n      window.tb = new Threebox(\n        this.map,\n        this.map.getCanvas().getContext(\"webgl\"),\n        {\n          defaultLights: true,\n        }\n      );\n\n      // let _this = this;\n\n      // Add draw control\n      if (this.map.getLayer(\"custom_layer\") == null) {\n\n        this.map.on('load', () => {\n\n          // // Add 3D terrain\n          // this.map.addSource('mapbox-dem', {\n          //   'type': 'raster-dem',\n          //   'url': 'mapbox://mapbox.mapbox-terrain-dem-v1',\n          //   'tileSize': 512,\n          //   'maxzoom': 20\n          // });\n          //\n          // // add the DEM source as a terrain layer with exaggerated height\n          // this.map.setTerrain({ 'source': 'mapbox-dem', 'exaggeration': 1.5 });\n\n          // // Add parcels layer source (CoV)\n          // this.map.addSource('property-parcel-polygons', {\n          //   'type': 'geojson',\n          //   'data': 'https://raw.githubusercontent.com/nicholasmartino/vue-threebox/master/public/data/property-parcel-polygons.geojson',\n          // });\n          //\n          // // Add parcels layer to map\n          // this.map.addLayer({\n          //   'id': 'property-parcel-polygons-shp',\n          //   'type': 'fill',\n          //   'source': 'property-parcel-polygons',\n          //   'paint': {\n          //     'fill-color': '#0080ff', // blue color fill\n          //     'fill-opacity': 0.2,\n          //   },\n          // });\n\n          // The 'building' layer in the Mapbox Streets\n          // vector tileset contains building height data\n          // from OpenStreetMap.\n          this.map.addLayer({\n            'id': 'add-3d-buildings',\n            'source': 'composite',\n            'source-layer': 'building',\n            'filter': ['==', 'extrude', 'true'],\n            'type': 'fill-extrusion',\n            'minzoom': 12,\n            'paint': {\n              'fill-extrusion-color': '#aaa',\n\n              // Use an 'interpolate' expression to\n              // add a smooth transition effect to\n              // the buildings as the user zooms in.\n              'fill-extrusion-height': [\n                'interpolate',\n                ['linear'],\n                ['zoom'],\n                9,\n                0,\n                15.05,\n                ['get', 'height']\n              ],\n              'fill-extrusion-base': [\n                'interpolate',\n                ['linear'],\n                ['zoom'],\n                9,\n                0,\n                15.05,\n                ['get', 'min_height']\n              ],\n\n              // 'fill-extrusion-height': ['get', 'height'],\n              'fill-extrusion-opacity': 0.8,\n            },\n          });\n\n        });\n\n        // // Add spheres to map\n        // this.map.addLayer({\n        //   id: \"custom_layer\",\n        //   type: \"custom\",\n        //   renderingMode: \"3d\",\n        //\n        //   onAdd: function (map, mbxContext) {\n        //     window.tb.add(_this.sphere(-123.1068658, 49.2626982));\n        //     window.tb.add(_this.sphere(-123.1088658, 49.2626982));\n        //\n        //     let pulseObj = window.tb\n        //       .Object3D({ obj: pulse, units: \"meters\" })\n        //       .setCoords([-123.1068658, 49.2626982, 0]);\n        //\n        //     pulseObj.setAnchor(\"bottom-left\");\n        //\n        //     window.tb.add(pulseObj);\n        //   },\n        //   render: function (gl, matrix) {\n        //     window.tb.update();\n        //     _this.animatePulse();\n        //   },\n        // });\n\n      }\n    });\n\n    // Add draw controls\n    const draw = new MapboxDraw();\n    this.map.addControl(draw, 'top-right');\n\n    // Extract boundary of polygon\n    function dividePol(){\n      const data = draw.getAll();\n      const pol = turf.polygon(data)\n      const line = turf.polygonToLine(pol);\n      console.log(line)\n      const chunks = turf.lineChunk(line, 0.1)\n      console.log(chunks)\n      console.log(chunks.length)\n      for (let i = 0; i < chunks.length; i++) {\n        const seg = turf.lineString(chunks[i])\n        console.log(turf.centroid(seg))\n      }\n      return chunks\n    }\n\n    // Calculate the area of drawn polygons\n    function updateArea() {\n        const data = draw.getAll();\n        const answer = document.getElementById('calculated-area');\n        if (data.features.length > 0) {\n          const area = turf.area(data);\n\n          // Restrict the area to 2 decimal points.\n          const rounded_area = Math.round(area * 100) / 100;\n          answer.innerHTML = `<p><strong>${rounded_area}</strong> m²</p>`;\n        } else {\n          answer.innerHTML = '';\n          // if (e.type !== 'draw.delete')\n          //   alert('Click the map to draw a polygon.');\n      }\n    }\n\n    this.map.on('draw.create', updateArea);\n    this.map.on('draw.delete', updateArea);\n    this.map.on('draw.update', updateArea);\n\n    this.map.on('draw.create', () => {\n      console.log(dividePol())\n      this.map.addSource('draw', {\n        'type': 'geojson',\n        'data': dividePol(),\n      });\n      this.map.addLayer({\n        'id': 'outline',\n        'type': 'circle',\n        'source': 'draw',\n        'paint': {\n          'circle-color': '#F84C4C',\n        }\n      });\n    });\n\n    this.map.on('draw.delete', () => {\n      this.map.removeLayer('outline')\n      this.map.removeSource('draw')\n    });\n\n    this.map.on('draw.update', () => {\n      this.map.removeLayer('outline')\n      this.map.removeSource('draw')\n      this.map.addSource('draw', {\n        'type': 'geojson',\n        'data': dividePol(),\n      });\n      this.map.addLayer({\n        'id': 'outline',\n        'type': 'circle',\n        'source': 'draw',\n        'paint': {\n          'circle-radius': 10,\n          'circle-color': '#F84C4C' // red color\n        }\n      });\n    });\n\n  },\n  methods: {\n    sphere(lon, lat) {\n      let origin = [lon, lat, 0];\n      return window.tb\n        .sphere({ color: \"red\", material: \"MeshToonMaterial\" })\n        .setCoords(origin);\n    },\n    animatePulse() {\n      pulse.update();\n      this.map.triggerRepaint();\n    },\n  },\n\n};\n\n</script>\n\n<style>\n#map {\n  position: absolute;\n  width: 100vw;\n  height: 100vh;\n}\n@import \"https://api.mapbox.com/mapbox-gl-js/v0.42.0/mapbox-gl.css\";\n@import \"https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.2.2/mapbox-gl-draw.css\";\n.mapboxgl-ctrl-group button {\n    width: 29px;\n    height: 29px;\n    display: block;\n    padding: 0;\n    outline: none;\n    border: 0;\n    box-sizing: border-box;\n    background-color: transparent;\n    cursor: pointer;\n    overflow: hidden;\n}\n.mapboxgl-ctrl-top-right {\n    top: 0;\n    right: 0;\n    position: absolute;\n}\n</style>\n"],"sourceRoot":"src/components"}]}